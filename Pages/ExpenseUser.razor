@page "/expenseUser"

@using MyWallet.Services
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MyWallet.ViewModel
@using Tag = AntDesign.Tag

@inject IAccessTokenProvider TokenProvider;
@inject IExpenseService ExpenseService;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http;
@inject IMessageService _message

@attribute [Authorize]

<PageTitle>MyWallet - Minhas Despesas</PageTitle>

<h1>Suas Despesas</h1>

@if (_expenses != null)
{
    <Table DataSource="@_expenses.ToList()" Bordered=@true HidePagination="@true">
        <PropertyColumn Property="c => c.Category" Title="Categoria" >
            <a>@context.Category</a>
        </PropertyColumn>
        <PropertyColumn Property="c => c.Description" Title="Descrição">
            <a>@context.Description</a>
        </PropertyColumn>
        <PropertyColumn Property="c => c.Tag" Title="Tag" >
            <Tag Color="@PresetColor.Cyan.ToString()">@context.Tag.ToString()</Tag>
        </PropertyColumn>
        <PropertyColumn Property="c => c.Value" Title="Valor (R$)">
            <a>@context.Value</a>
        </PropertyColumn>
        <PropertyColumn Property="c => c.DueDate" Title="Data de Vencimento" Format="yyyy/MM/dd">
            <a>@context.DueDate.ToString("d/M/yy")</a>
        </PropertyColumn>
        <PropertyColumn Property="c => c.RegistrationDate" Title="Data de Registro" Format="dd-MM-yyyy">
            <a>@context.RegistrationDate.ToString("d/M/yy")</a>
        </PropertyColumn>
        <PropertyColumn Property="c => c.Installments" Title="Quantidade de Parcelas">
            <a>@context.Installments</a>
        </PropertyColumn>
        <PropertyColumn Property="c => c.MethodPayment" Title="Método de pagamento">
            <a>@context.MethodPayment</a>
        </PropertyColumn>
        <PropertyColumn Property="c => c.Status" Title="Status">
            @if (context.Status)
            {
                <Tag Color="@PresetColor.Red.ToString()">A Pagar</Tag>
            }
            else
            {
                <Tag Color="@PresetColor.Green.ToString()">Paga</Tag>
            }
        </PropertyColumn>
        <ActionColumn Title="Action">
            <Space>
                <SpaceItem><Button Danger OnClick="()=>Delete(context.Id)">Deletar</Button></SpaceItem>
                <SpaceItem>
                    <Button @onclick="_=>Open(context)">Visualizar</Button>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
}
else
{
    <p>
        <em>Carregando...</em>
    </p>
}

@* Visualizar Despesa *@

<div>
    <Drawer Closable="true" Width="720" Visible="visible" Title='("Submit from in Drawer")' OnClose="_=>Close()">
        <Template style="height:90%">
            <Row Gutter="16" Style="margin-top: 0.375rem">
                <AntDesign.Col Span="12">
                    <Text>Título da Despesa</Text>
                    <Input @bind-Value="@_viewExpense.Category"/>
                </AntDesign.Col>
            </Row>
            <Row Gutter="16" Style="margin-top: 0.375rem">
                <AntDesign.Col Span="12">
                    <Text>Descrição</Text>
                    <TextArea @bind-Value="@_viewExpense.Description"></TextArea>
                </AntDesign.Col>
            </Row>
            <Row Gutter="16" Style="margin-top: 0.375rem">
                <AntDesign.Col Span="12">
                    <Text>Data de Inclusão</Text>
                    <br>
                    <DatePicker @bind-Value="@_viewExpense.RegistrationDate" DefaultPickerValue="DateTime.Now" DefaultValue="DateTime.Now" Format="dd/MM/yyyy"/>
                </AntDesign.Col>
            </Row>
            <Row Gutter="16" Style="margin-top: 0.375rem">
                <AntDesign.Col Span="12">
                    <Text>Data de Vencimento</Text>
                    <br>
                    <DatePicker @bind-Value="@_viewExpense.DueDate" DefaultPickerValue="DateTime.Now" DefaultValue="DateTime.Now" Format="dd/MM/yyyy"/>
                </AntDesign.Col>
            </Row>
            <Row Gutter="16" Style="margin-top: 0.375rem">
                <AntDesign.Col Span="12">
                    <Text>Valor Total</Text>
                    <br>
                    <AntDesign.InputNumber @bind-Value="@_viewExpense.Value" PlaceHolder="000.00" />
                </AntDesign.Col>
            </Row>
            <Row Gutter="16" Style="margin-top: 0.375rem">
                <AntDesign.Col Span="12">
                    <Text>Quantidade de Parcelas</Text>
                    <br>
                    <AntDesign.InputNumber @bind-Value="_viewExpense.Installments" Min="1" DefaultValue="1" />
                </AntDesign.Col>
            </Row>
            <Row Gutter="16" Style="margin-top: 0.375rem">
                <AntDesign.Col Span="12">
                    <Text>Método de Pagamento</Text>
                    <EnumSelect TEnum="Payment" bind-Value="_viewExpense.MethodPayment" />
                </AntDesign.Col>
            </Row>
            <Row Gutter="16" Style="margin-top: 0.375rem">
                <AntDesign.Col Span="12">
                    <Text>Tag</Text>
                    <EnumSelect TEnum="ViewModel.Tag" bind-Value="_viewExpense.Tag" />
                </AntDesign.Col>
            </Row>
            <Row Gutter="16" Style="margin-top: 0.375rem">
                <AntDesign.Col Span="12">
                    <Text>Status</Text>
                    <br>
                    <Switch @bind-Value="@_viewExpense.Status" />
                </AntDesign.Col>
            </Row>
        </Template>
    </Drawer>
</div>

@code {
    private IEnumerable<MyWallet.ViewModel.Expense>? _expenses;
    bool visible = false;
    private ViewModel.Expense _viewExpense = new();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _expenses = await ExpenseService.GetAllById();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Console.WriteLine(e.InnerException);
            Console.WriteLine(e.Source);
        }
    }

    public async Task Delete(Guid idExpense)
    {
        var result = await ExpenseService.Delete(idExpense);

        if (!result.Success)
        {
            await _message.Error("Não foi possível deletar a despesa!" + "Mensagem API: " + result.Message);
            return;
        }
        
        await _message.Success("Sua despesa foi deletada com sucesso!" + "Mensagem API: " + result.Message);
        
        _expenses = await ExpenseService.GetAllById();
    }

    void Open(ViewModel.Expense expense)
    {
        _viewExpense = expense;
        visible = true;
    }

    void Close()
    {
        visible = false;
    }
}